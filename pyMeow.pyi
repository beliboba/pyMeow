from typing import Any, Dict, Iterator, List, Tuple, Union
import ctypes

# Type aliases
byte = int
uint8 = int
uint = int
int8 = int
int16 = int
int64 = int
float64 = float

class Process:
    name: str
    pid: int
    debug: bool
    if sys.platform == "win32":
        handle: int

class Module:
    name: str
    base: int
    end: int
    size: int

class Color:
    r: uint8
    g: uint8
    b: uint8
    a: uint8

class Vector2:
    x: float
    y: float

class Vector3:
    x: float
    y: float
    z: float

class Rectangle:
    x: float
    y: float
    width: float
    height: float

class Texture:
    pass

class Pixel:
    x: int
    y: int
    color: Color

# Memory module
def enum_processes() -> Iterator[Process]: ...
def pid_exists(pid: int) -> bool: ...
def process_exists(processName: str) -> bool: ...
def get_process_id(processName: str) -> int: ...
def get_process_name(pid: int) -> str: ...
def open_process(process: Union[str, int], debug: bool = False) -> Process: ...
def get_process_path(process: Process) -> str: ...
def close_process(process: Process) -> None: ...
def enum_modules(process: Process) -> Iterator[Module]: ...
def module_exists(process: Process, moduleName: str) -> bool: ...
def get_module(process: Process, moduleName: str) -> Module: ...
def is_64_bit(process: Process) -> bool: ...
def process_running(process: Process) -> bool: ...
def get_os_error() -> Tuple[int, str]: ...
def get_proc_address(moduleName: str, functionName: str) -> int: ...
def create_remote_thread(process: Process, startAddress: int, param: int) -> bool: ...
def inject_library(process: Process, dllPath: str) -> bool: ...

def aob_scan_module(process: Process, moduleName: str, pattern: str, relative: bool = False, single: bool = True, algorithm: int = 0) -> List[int]: ...
def aob_scan_range(process: Process, pattern: str, rangeStart: int, rangeEnd: int, relative: bool = False, single: bool = True, algorithm: int = 0) -> List[int]: ...
def aob_scan_bytes(pattern: str, byteBuffer: List[byte], single: bool = True, algorithm: int = 0) -> List[int]: ...
def pointer_chain_32(process: Process, base: int, offsets: List[int]) -> int: ...
def pointer_chain_64(process: Process, base: int, offsets: List[int]) -> int: ...

def page_protection(process: Process, address: int, newProtection: int) -> int: ...
def allocate_memory(process: Process, size: int, protection: int = 0) -> int: ...
def free_memory(process: Process, address: int) -> bool: ...

def r(process: Process, address: int, type: str, size: int = 1) -> Any: ...
def r_string(process: Process, address: int, size: int = 30) -> str: ...
def r_int(process: Process, address: int) -> int: ...
def r_ints(process: Process, address: int, size: int) -> List[int]: ...
def r_int8(process: Process, address: int) -> int8: ...
def r_ints8(process: Process, address: int, size: int) -> List[int]: ...
def r_int16(process: Process, address: int) -> int16: ...
def r_ints16(process: Process, address: int, size: int) -> List[int]: ...
def r_uint(process: Process, address: int) -> int: ...
def r_uints(process: Process, address: int, size: int) -> List[int]: ...
def r_uint16(process: Process, address: int) -> int: ...
def r_uints16(process: Process, address: int, size: int) -> List[int]: ...
def r_uint64(process: Process, address: int) -> int: ...
def r_uints64(process: Process, address: int, size: int) -> List[int]: ...
def r_int64(process: Process, address: int) -> int64: ...
def r_ints64(process: Process, address: int, size: int) -> List[int]: ...
def r_float(process: Process, address: int) -> float: ...
def r_floats(process: Process, address: int, size: int) -> List[float]: ...
def r_float64(process: Process, address: int) -> float64: ...
def r_floats64(process: Process, address: int, size: int) -> List[float]: ...
def r_byte(process: Process, address: int) -> byte: ...
def r_bytes(process: Process, address: int, size: int) -> List[byte]: ...
def r_vec2(process: Process, address: int) -> Vector2: ...
def r_vec3(process: Process, address: int) -> Vector3: ...
def r_bool(process: Process, address: int) -> bool: ...
def r_ctype(process: Process, address: int, ctype: Any) -> Any: ...

def w(process: Process, address: int, data: Any, type: str) -> None: ...
def w_string(process: Process, address: int, data: str) -> None: ...
def w_int(process: Process, address: int, data: int) -> None: ...
def w_ints(process: Process, address: int, data: List[int]) -> None: ...
def w_int8(process: Process, address: int, data: int) -> None: ...
def w_ints8(process: Process, address: int, data: List[int]) -> None: ...
def w_int16(process: Process, address: int, data: int) -> None: ...
def w_ints16(process: Process, address: int, data: List[int]) -> None: ...
def w_int64(process: Process, address: int, data: int) -> None: ...
def w_ints64(process: Process, address: int, data: List[int]) -> None: ...
def w_uint(process: Process, address: int, data: int) -> None: ...
def w_uints(process: Process, address: int, data: List[int]) -> None: ...
def w_uint16(process: Process, address: int, data: int) -> None: ...
def w_uints16(process: Process, address: int, data: List[int]) -> None: ...
def w_uint64(process: Process, address: int, data: int) -> None: ...
def w_uints64(process: Process, address: int, data: List[int]) -> None: ...
def w_float(process: Process, address: int, data: float) -> None: ...
def w_floats(process: Process, address: int, data: List[float]) -> None: ...
def w_float64(process: Process, address: int, data: float) -> None: ...
def w_floats64(process: Process, address: int, data: List[float]) -> None: ...
def w_byte(process: Process, address: int, data: byte) -> None: ...
def w_bytes(process: Process, address: int, data: List[byte]) -> None: ...
def w_vec2(process: Process, address: int, data: Vector2) -> None: ...
def w_vec3(process: Process, address: int, data: Vector3) -> None: ...
def w_bool(process: Process, address: int, data: bool) -> None: ...
def w_ctype(process: Process, address: int, data: Any) -> None: ...

# Overlay module
def overlay_init(target: str = "Full", fps: int = 0, title: str = "PyMeow", logLevel: int = 5, exitKey: int = -1, trackTarget: bool = False) -> None: ...
def overlay_loop() -> bool: ...
def overlay_close() -> None: ...
def toggle_mouse() -> None: ...
def get_fps() -> int: ...
def get_screen_height() -> int: ...
def get_screen_width() -> int: ...
def set_window_position(x: int, y: int) -> None: ...
def get_window_position() -> Vector2: ...
def set_fps(fps: int) -> None: ...
def set_window_size(width: int, height: int) -> None: ...
def set_window_icon(filePath: str) -> None: ...
def set_window_title(title: str) -> None: ...
def set_window_monitor(monitor: int) -> None: ...
def set_log_level(level: int) -> None: ...
def set_window_flag(flag: int) -> None: ...
def get_window_handle() -> int: ...

# Shapes/Drawing module
def begin_drawing() -> None: ...
def end_drawing() -> None: ...
def draw_fps(posX: float, posY: float) -> None: ...
def draw_text(text: str, posX: float, posY: float, fontSize: float, color: Color) -> None: ...
def draw_pixel(posX: float, posY: float, color: Color) -> None: ...
def draw_line(startPosX: float, startPosY: float, endPosX: float, endPosY: float, color: Color, thick: float = 1.0) -> None: ...
def draw_circle(centerX: float, centerY: float, radius: float, color: Color) -> None: ...
def draw_circle_lines(centerX: float, centerY: float, radius: float, color: Color) -> None: ...
def draw_circle_sector(centerX: float, centerY: float, radius: float, startAngle: float, endAngle: float, segments: int, color: Color) -> None: ...
def draw_circle_sector_lines(centerX: float, centerY: float, radius: float, startAngle: float, endAngle: float, segments: int, color: Color) -> None: ...
def draw_ring(centerX: float, centerY: float, segments: int, innerRadius: float, outerRadius: float, startAngle: float, endAngle: float, color: Color) -> None: ...
def draw_ring_lines(centerX: float, centerY: float, segments: int, innerRadius: float, outerRadius: float, startAngle: float, endAngle: float, color: Color) -> None: ...
def draw_ellipse(centerX: float, centerY: float, radiusH: float, radiusV: float, color: Color) -> None: ...
def draw_ellipse_lines(centerX: float, centerY: float, radiusH: float, radiusV: float, color: Color) -> None: ...
def draw_rectangle(posX: float, posY: float, width: float, height: float, color: Color) -> Rectangle: ...
def draw_rectangle_lines(posX: float, posY: float, width: float, height: float, color: Color, lineThick: float = 1.0) -> Rectangle: ...
def draw_rectangle_rounded(posX: float, posY: float, width: float, height: float, roundness: float, segments: int, color: Color) -> Rectangle: ...
def draw_rectangle_rounded_lines(posX: float, posY: float, width: float, height: float, roundness: float, segments: int, color: Color, lineThick: float = 1.0) -> Rectangle: ...
def draw_triangle(pos1X: float, pos1Y: float, pos2X: float, pos2Y: float, pos3X: float, pos3Y: float, color: Color) -> None: ...
def draw_triangle_lines(pos1X: float, pos1Y: float, pos2X: float, pos2Y: float, pos3X: float, pos3Y: float, color: Color) -> None: ...
def draw_poly(posX: float, posY: float, sides: int, radius: float, rotation: float, color: Color) -> None: ...
def draw_poly_lines(posX: float, posY: float, sides: int, radius: float, rotation: float, lineThick: float, color: Color) -> None: ...
def load_texture(fileName: str) -> Texture: ...
def load_texture_bytes(fileType: str, data: List[uint8]) -> Texture: ...
def draw_texture(texture: Texture, posX: float, posY: float, tint: Color, rotation: float, scale: float) -> None: ...
def unload_texture(texture: Texture) -> None: ...
def load_font(fileName: str, fontId: int) -> None: ...
def draw_font(fontId: int, text: str, posX: float, posY: float, fontSize: float, spacing: float, tint: Color) -> None: ...

# GUI module
def gui_window_box(posX: float, posY: float, width: float, height: float, title: str) -> bool: ...
def gui_group_box(posX: float, posY: float, width: float, height: float, text: str) -> None: ...
def gui_line(posX: float, posY: float, width: float, height: float, text: str) -> None: ...
def gui_panel(posX: float, posY: float, width: float, height: float) -> None: ...
def gui_label(posX: float, posY: float, width: float, height: float, text: str) -> None: ...
def gui_button(posX: float, posY: float, width: float, height: float, text: str) -> bool: ...
def gui_label_button(posX: float, posY: float, width: float, height: float, text: str) -> bool: ...
def gui_check_box(posX: float, posY: float, width: float, height: float, text: str, checked: bool) -> bool: ...
def gui_combo_box(posX: float, posY: float, width: float, height: float, text: str, active: int) -> int: ...
def gui_dropdown_box(posX: float, posY: float, width: float, height: float, text: str, id: int, active: int = 0) -> int: ...
def gui_text_box(posX: float, posY: float, width: float, height: float, text: str, id: int) -> str: ...
def gui_progress_bar(posX: float, posY: float, width: float, height: float, textLeft: str, textRight: str, value: float, minValue: float, maxValue: float) -> float: ...
def gui_status_bar(posX: float, posY: float, width: float, height: float, text: str) -> None: ...
def gui_message_box(posX: float, posY: float, width: float, height: float, title: str, message: str, buttons: str) -> int: ...
def gui_color_picker(posX: float, posY: float, width: float, height: float, id: int) -> Color: ...
def gui_color_bar_alpha(posX: float, posY: float, width: float, height: float, alpha: float) -> float: ...
def gui_color_bar_hue(posX: float, posY: float, width: float, height: float, value: float) -> float: ...
def gui_scroll_bar(posX: float, posY: float, width: float, height: float, value: int, minValue: int, maxValue: int) -> int: ...
def gui_spinner(posX: float, posY: float, width: float, height: float, text: str, value: int, minValue: int, maxValue: int, id: int) -> int: ...
def gui_slider(posX: float, posY: float, width: float, height: float, textLeft: str, textRight: str, value: float, minValue: float, maxValue: float) -> float: ...
def gui_slider_bar(posX: float, posY: float, width: float, height: float, textLeft: str, textRight: str, value: float, minValue: float, maxValue: float) -> None: ...
def gui_load_style(fileName: str) -> None: ...
def gui_fade(alpha: float) -> None: ...
def gui_set_state(state: int) -> None: ...

# Vector module
def vec2(x: float = 0, y: float = 0) -> Vector2: ...
def vec2_add(v1: Vector2, v2: Vector2) -> Vector2: ...
def vec2_add_value(v: Vector2, value: float) -> Vector2: ...
def vec2_subtract(v1: Vector2, v2: Vector2) -> Vector2: ...
def vec2_subtract_value(v: Vector2, value: float) -> Vector2: ...
def vec2_multiply(v1: Vector2, v2: Vector2) -> Vector2: ...
def vec2_multiply_value(v: Vector2, value: float) -> Vector2: ...
def vec2_divide(v1: Vector2, v2: Vector2) -> Vector2: ...
def vec2_length(v: Vector2) -> float: ...
def vec2_length_sqr(v: Vector2) -> float: ...
def vec2_distance(v1: Vector2, v2: Vector2) -> float: ...
def vec2_closest(v: Vector2, vectorList: List[Vector2]) -> Vector2: ...

def vec3(x: float = 0, y: float = 0, z: float = 0) -> Vector3: ...
def vec3_add(v1: Vector3, v2: Vector3) -> Vector3: ...
def vec3_add_value(v: Vector3, value: float) -> Vector3: ...
def vec3_subtract(v1: Vector3, v2: Vector3) -> Vector3: ...
def vec3_subtract_value(v: Vector3, value: float) -> Vector3: ...
def vec3_multiply(v1: Vector3, v2: Vector3) -> Vector3: ...
def vec3_multiply_value(v: Vector3, value: float) -> Vector3: ...
def vec3_divide(v1: Vector3, v2: Vector3) -> Vector3: ...
def vec3_length(v: Vector3) -> float: ...
def vec3_length_sqr(v: Vector3) -> float: ...
def vec3_distance(v: Vector3) -> float: ...
def vec3_closest(v: Vector3, vectorList: List[Vector3]) -> Vector3: ...

# Pixel Scanning module
def pixel_enum_region(x: float, y: float, width: float, height: float) -> Iterator[Pixel]: ...
def pixel_enum_screen() -> Iterator[Pixel]: ...
def pixel_at_mouse() -> Pixel: ...
def pixel_save_to_file(x: float, y: float, width: float, height: float, fileName: str) -> None: ...
def pixel_search_colors(x: float, y: float, width: float, height: float, colors: List[Color], similarity: float) -> Iterator[Pixel]: ...

# Sound module
def sound_init() -> None: ...
def sound_deinit() -> None: ...
def load_sound(fileName: str) -> int: ...
def unload_sound(soundId: int) -> None: ...
def play_sound(soundId: int) -> None: ...
def pause_sound(soundId: int) -> None: ...
def resume_sound(soundId: int) -> None: ...
def stop_sound(soundId: int) -> None: ...
def set_sound_volume(soundId: int, volume: int) -> None: ...
def is_sound_playing(soundId: int) -> bool: ...
def play_multisound(soundId: int) -> None: ...
def stop_multisound() -> None: ...

# Misc/Utilities module
def system_name() -> str: ...
def get_display_resolution() -> Tuple[int, int]: ...
def get_window_info(name: str) -> Tuple[int, int, int, int]: ...
def get_window_title(processId: int) -> str: ...
def get_monitor_refresh_rate(monitor: int = 0) -> int: ...
def get_monitor_count() -> int: ...
def get_monitor_name(monitor: int = 0) -> str: ...
def new_color(r: uint8, g: uint8, b: uint8, a: uint8) -> Color: ...
def new_color_hex(hexValue: int) -> Color: ...
def new_color_float(r: float, g: float, b: float, a: float) -> Color: ...
def get_color(colorName: str) -> Color: ...
def all_colors() -> Dict[str, Color]: ...
def compare_color_pct(color1: Color, color2: Color) -> float: ...
def fade_color(color: Color, alpha: float) -> Color: ...
def world_to_screen(matrix: List[float], pos: Vector3, algo: int = 0) -> Vector2: ...
def world_to_screen_noexc(matrix: List[float], pos: Vector3, algo: int = 0) -> Tuple[bool, Vector2]: ...
def key_pressed(key: int) -> bool: ...
def press_key(key: int) -> None: ...
def mouse_pressed(button: str = "left") -> bool: ...
def mouse_move(x: int, y: int, relative: bool = False) -> None: ...
def mouse_down(button: str = "left") -> None: ...
def mouse_up(button: str = "left") -> None: ...
def mouse_click(button: str = "left") -> None: ...
def mouse_position() -> Tuple[int, int]: ...
def measure_text(text: str, fontSize: int) -> int: ...
def measure_font(fontId: int, text: str, fontSize: float, spacing: float) -> Vector2: ...
def run_time() -> float: ...
def check_collision_point_rec(pointX: float, pointY: float, rec: Rectangle) -> bool: ...
def check_collision_recs(rec1: Rectangle, rec2: Rectangle) -> bool: ...
def check_collision_circle_rec(posX: float, posY: float, radius: float, rec: Rectangle) -> bool: ...
def check_collision_lines(startPos1X: float, endPos1X: float, startPos1Y: float, endPos1Y: float, startPos2X: float, startPos2Y: float, endPos2X: float, endPos2Y: float) -> Vector2: ...
def check_collision_circles(pos1X: float, pos1Y: float, radius1: float, pos2X: float, pos2Y: float, radius2: float) -> bool: ...